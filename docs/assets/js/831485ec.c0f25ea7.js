"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[319],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(a),k=o,f=d["".concat(c,".").concat(k)]||d[k]||p[k]||r;return a?n.createElement(f,l(l({ref:t},s),{},{components:a})):n.createElement(f,l({ref:t},s))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},87360:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var n=a(87462),o=(a(67294),a(3905));const r={title:"Blocks"},l="Block Modules",i={unversionedId:"Blocks",id:"Blocks",title:"Blocks",description:"Creating a block",source:"@site/docs/Blocks.md",sourceDirName:".",slug:"/Blocks",permalink:"/ultimate-build-docs/docs/Blocks",draft:!1,editUrl:"https://github.com/Rusty483/ultimate-build/edit/main/docs/Blocks.md",tags:[],version:"current",frontMatter:{title:"Blocks"},sidebar:"defaultSidebar",previous:{title:"Attributes",permalink:"/ultimate-build-docs/docs/Attributes"}},c={},u=[{value:"Creating a block",id:"creating-a-block",level:2},{value:"Initalization",id:"initalization",level:3},{value:"Constructor",id:"constructor",level:3},{value:"What are these tables?",id:"what-are-these-tables",level:2},{value:"defaultAttributes",id:"defaultattributes",level:3},{value:"defaultMetadata",id:"defaultmetadata",level:3},{value:"Reducers",id:"reducers",level:3},{value:"Metadata",id:"metadata",level:3}],s={toc:u},d="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"block-modules"},"Block Modules"),(0,o.kt)("h2",{id:"creating-a-block"},"Creating a block"),(0,o.kt)("p",null,"You can define a block by creating a module script inside of src/ServerScriptService/Blocks/"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Make sure you name the module the name of the actual block in the map.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local Block = {}\n\nBlock.defaultAttributes = {}\n\nBlock.Reducers = {}\n\nBlock.defaultMetadata = {}\n\nfunction Block.Init(Part: BasePart, Janitor, Attributes, Metadata)\n    local function Constructor()\n    end\n    return Constructor\nend\n\nreturn Block\n")),(0,o.kt)("h3",{id:"initalization"},"Initalization"),(0,o.kt)("p",null,"As you can see, we defined a init function for a block called ",(0,o.kt)("inlineCode",{parentName:"p"},"Block")),(0,o.kt)("p",null,"Whenever a user copies a part called ",(0,o.kt)("inlineCode",{parentName:"p"},"Block")," this init function will get called and pass along that part along with a ",(0,o.kt)("a",{parentName:"p",href:"https://howmanysmall.github.io/Janitor/"},(0,o.kt)("inlineCode",{parentName:"a"},"Janitor")),"."),(0,o.kt)("p",null,"Next, the ",(0,o.kt)("a",{parentName:"p",href:"'Block#constructor'"},(0,o.kt)("inlineCode",{parentName:"a"},"Constructor"))," function will get called which will set up any events the block needs in order to function."),(0,o.kt)("p",null,"This janitor object is what we use to clean up any events the block may create in its functionality when the block gets deleted or destroyed in order to save out on memory."),(0,o.kt)("p",null,"We call this state the block is in ",(0,o.kt)("inlineCode",{parentName:"p"},"hibernation"),"."),(0,o.kt)("h3",{id:"constructor"},"Constructor"),(0,o.kt)("p",null,"When a block is in ",(0,o.kt)("inlineCode",{parentName:"p"},"hibernation")," and gets parented back to the workspace, we need to wake it up."),(0,o.kt)("p",null,"This is what the constructor function is for, it sets up the block's event connections to our ",(0,o.kt)("a",{parentName:"p",href:"https://howmanysmall.github.io/Janitor/"},(0,o.kt)("inlineCode",{parentName:"a"},"Janitor"))," in order to wake it up."),(0,o.kt)("h2",{id:"what-are-these-tables"},"What are these tables?"),(0,o.kt)("h3",{id:"defaultattributes"},"defaultAttributes"),(0,o.kt)("p",null,"defaultAttributes is a table that holds all of the default attributes of block that the user can program with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local defaultAttributes = {\n    Force = 10;\n}\n")),(0,o.kt)("p",null,"We can set a variety of different types of data for attributes. Later, we will go over what you can/can not set."),(0,o.kt)("h3",{id:"defaultmetadata"},"defaultMetadata"),(0,o.kt)("p",null,"defaultMetadata is default metadata for our block. "),(0,o.kt)("p",null,"Each time a block that gets copied from our map, they will get the default metadata listed here."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"Blocks#metadata"},(0,o.kt)("inlineCode",{parentName:"a"},"Metadata"))," for details."),(0,o.kt)("h3",{id:"reducers"},"Reducers"),(0,o.kt)("p",null,"Reducers are just a dictionary of functions mapped to each of our attributes that get called whenever somebody trys to program this block."),(0,o.kt)("p",null,"This is very important as we want to make sure the data passed in is valid and safe for our block."),(0,o.kt)("p",null,"The basic way a reducer is defined is as follows:"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can access a variety of different pre-defined reducer functions in ServerScriptService/Modules/ReducerTemplates.lua")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local Reducers = {\n    Force = function(state:State,action:Action)\n        local value = action.input\n\n        if typeof(value) ~= 'number' then\n            return Option.None\n        end\n        \n        if value ~= value then\n            return Option.None\n        end\n        \n        return Option.Some(value)\n    end\n}\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"When we return Option.Some(value),  the block's attributes will get updated. However, we ",(0,o.kt)("strong",{parentName:"p"},"wont")," when we return Option.None.")),(0,o.kt)("h3",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Metadata is a table that holds data that you dont want to expose to the users but want to still have access."),(0,o.kt)("p",null,"One usecase you may stumble across a lot in our code are ",(0,o.kt)("a",{parentName:"p",href:"/api/Toggle"},(0,o.kt)("inlineCode",{parentName:"a"},"Toggles")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"function Block.Init(Part: BasePart, Janitor, Attributes, Metadata)\n    local clickDetector = ClickDetector.new(Part)\n    local toggle = nil\n\n    if Metadata.Toggle then\n        toggle = Metadata.Toggle:Attach(Part)\n    else\n        toggle = Toggle.new(Part)\n        toggle.State = true\n        toggle.Off.Color = Color3.new()\n        Metadata.Toggle = toggle\n    end\n\n    local function Enable()\n        toggle:Flip()\n    end\n\n    local function Constructor()\n        Janitor:Add(ClickDetector.MouseClick:Connect(Enable))\n    end\n\n    return Constructor\nend\n")),(0,o.kt)("p",null,"When we copy this block from the map, the toggle's metadata by default is ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," unless we set the ",(0,o.kt)("a",{parentName:"p",href:"Blocks#defaultmetadata"},(0,o.kt)("inlineCode",{parentName:"a"},"defaultMetadata")),"."),(0,o.kt)("p",null,"We set the toggle into our metadata, this now will get passed along to any copies of ",(0,o.kt)("strong",{parentName:"p"},"this")," block."))}p.isMDXComponent=!0}}]);